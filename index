<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI動態英文學習App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .card-shadow {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #fff;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <!-- 動態單字學習介面 -->
    <div id="dynamic-app" class="flex flex-col items-center w-full max-w-2xl bg-white rounded-3xl card-shadow p-6 sm:p-10 relative">
        <h1 class="text-3xl sm:text-4xl font-bold text-center text-blue-800 mb-6">英文單字學習生成器</h1>

        <!-- 輸入與生成區塊 -->
        <div class="w-full mb-6">
            <input id="word-input" type="text" placeholder="輸入你想學的英文單字" class="w-full px-4 py-3 border-2 border-gray-300 rounded-full focus:outline-none focus:border-blue-500 transition-colors duration-300 text-lg">
        </div>
        <button id="generate-content-btn" class="w-full py-4 px-6 text-xl font-bold text-white bg-green-500 rounded-full shadow-lg hover:bg-green-600 transition-colors duration-300 transform hover:scale-105 flex items-center justify-center">
            <span id="button-text">生成學習內容</span>
            <div id="button-spinner" class="spinner ml-3 hidden"></div>
        </button>

        <!-- 學習內容顯示區塊 -->
        <div id="content-display" class="w-full hidden mt-8 p-4 sm:p-8 bg-yellow-100 rounded-2xl card-shadow">
            
            <!-- 圖片區 -->
            <div class="w-full h-48 sm:h-64 bg-gray-200 rounded-xl mb-4 overflow-hidden relative">
                <img id="word-image" class="w-full h-full object-cover" src="" alt="單字圖片">
                <div class="absolute inset-0 flex items-center justify-center text-gray-500 font-medium text-lg" id="image-placeholder">圖片載入中...</div>
            </div>

            <!-- 單字與發音按鈕 -->
            <div class="flex flex-col sm:flex-row items-center justify-center sm:space-x-4 mb-4">
                <div class="flex items-center space-x-2">
                    <h3 id="word-display" class="text-3xl sm:text-4xl font-extrabold text-blue-800"></h3>
                    <button id="play-word-btn" class="text-3xl text-blue-600 hover:text-blue-800 transition-colors duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-8 h-8">
                            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.81 5 3.54 5 6.71s-2.11 5.9-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                        </svg>
                    </button>
                </div>
                <p id="chinese-display" class="text-xl sm:text-2xl text-gray-600 mt-2 sm:mt-0"></p>
            </div>

            <!-- 例句區 -->
            <div class="flex flex-col items-center justify-center space-x-2 mb-4">
                <p id="example-display" class="text-base sm:text-lg text-gray-500 italic"></p>
                <button id="play-example-btn" class="text-base text-gray-500 hover:text-gray-700 transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-5 h-5">
                        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.81 5 3.54 5 6.71s-2.11 5.9-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- 情境對話/短文區 -->
            <div id="context-section" class="mt-4 text-left">
                <h4 class="text-lg font-bold text-gray-800 mb-2">情境對話或短文</h4>
                <p id="context-display" class="text-gray-700 leading-relaxed"></p>
                <button id="play-context-btn" class="mt-2 text-base text-gray-500 hover:text-gray-700 transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-5 h-5 inline-block">
                        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.81 5 3.54 5 6.71s-2.11 5.9-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                        </svg>
                    <span class="ml-1">播放情境音檔</span>
                </button>
            </div>
        </div>

        <!-- 錯誤訊息區塊 -->
        <div id="error-message" class="hidden w-full max-w-2xl mt-8 p-6 bg-red-100 rounded-2xl text-red-700 font-semibold text-center">
            發生錯誤，請稍後再試。
        </div>

    </div>

    <script>
        const wordInput = document.getElementById('word-input');
        const generateContentBtn = document.getElementById('generate-content-btn');
        const contentDisplay = document.getElementById('content-display');
        const wordDisplay = document.getElementById('word-display');
        const chineseDisplay = document.getElementById('chinese-display');
        const exampleDisplay = document.getElementById('example-display');
        const contextDisplay = document.getElementById('context-display');
        const wordImage = document.getElementById('word-image');
        const imagePlaceholder = document.getElementById('image-placeholder');
        const errorMessage = document.getElementById('error-message');
        const playWordBtn = document.getElementById('play-word-btn');
        const playExampleBtn = document.getElementById('play-example-btn');
        const playContextBtn = document.getElementById('play-context-btn');
        const buttonText = document.getElementById('button-text');
        const buttonSpinner = document.getElementById('button-spinner');

        const geminiApiKey = "";
        const geminiTextApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${geminiApiKey}`;
        const imagenApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${geminiApiKey}`;
        const synth = window.speechSynthesis;
        let isSpeaking = false;

        function speakText(text) {
            if (!synth || isSpeaking) return;

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US';

            utterance.onstart = () => isSpeaking = true;
            utterance.onend = () => isSpeaking = false;
            utterance.onerror = (event) => {
                console.error('SpeechSynthesisUtterance.onerror', event);
                isSpeaking = false;
            };

            synth.speak(utterance);
        }

        // UI 狀態管理
        function showLoading(isLoading) {
            generateContentBtn.disabled = isLoading;
            if (isLoading) {
                buttonText.textContent = '正在生成...';
                buttonSpinner.classList.remove('hidden');
                contentDisplay.classList.add('hidden');
                errorMessage.classList.add('hidden');
            } else {
                buttonText.textContent = '生成學習內容';
                buttonSpinner.classList.add('hidden');
            }
        }

        function displayError(message = "發生錯誤，請稍後再試。") {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
            contentDisplay.classList.add('hidden');
            showLoading(false);
        }

        // 主要功能：生成學習內容
        async function generateLearningContent() {
            const word = wordInput.value.trim();
            if (!word) {
                displayError("請輸入一個單字。");
                return;
            }

            showLoading(true);
            wordImage.classList.add('hidden');
            imagePlaceholder.classList.remove('hidden');
            
            try {
                // 1. 生成翻譯、例句和情境對話
                const textPrompt = `I need you to act as a language tutor for a middle school student. The student wants to learn the word "${word}". Provide a structured JSON response with the following fields:
                - "word": the English word "${word}".
                - "translation": its single-line Chinese (Traditional) translation.
                - "example_sentence": a simple, easy-to-understand English example sentence using the word.
                - "context": a short, natural-sounding English dialogue or a short paragraph (3-4 sentences) using the word to show its context.
                The tone should be encouraging and simple for a learner.`;

                const textPayload = {
                    contents: [{ parts: [{ text: textPrompt }] }],
                    generationConfig: {
                        responseMimeType: "application/json"
                    }
                };
                
                let textResponse = await fetchWithExponentialBackoff(geminiTextApiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(textPayload)
                });
                
                if (!textResponse.ok) throw new Error(`Text generation failed with status: ${textResponse.status}`);
                const textResult = await textResponse.json();
                
                const textJson = JSON.parse(textResult.candidates[0].content.parts[0].text.replace(/```json\n|\n```/g, ''));
                
                wordDisplay.textContent = textJson.word;
                chineseDisplay.textContent = textJson.translation;
                exampleDisplay.textContent = textJson.example_sentence;
                contextDisplay.textContent = textJson.context;
                
                // 2. 生成圖片
                const imagePrompt = `A simple, colorful, and friendly illustration of a scene for the English word "${word}". The style should be clean and suitable for a children's book.`;
                const imagePayload = { instances: [{ prompt: imagePrompt }], parameters: { "sampleCount": 1 } };
                
                let imageResponse = await fetchWithExponentialBackoff(imagenApiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(imagePayload)
                });
                
                if (!imageResponse.ok) throw new Error(`Image generation failed with status: ${imageResponse.status}`);
                const imageResult = await imageResponse.json();
                const imageData = imageResult.predictions[0]?.bytesBase64Encoded;
                if (!imageData) throw new Error("Image data is missing from the response.");

                wordImage.src = `data:image/png;base64,${imageData}`;
                wordImage.onload = () => {
                    wordImage.classList.remove('hidden');
                    imagePlaceholder.classList.add('hidden');
                };

                contentDisplay.classList.remove('hidden');
                showLoading(false);

            } catch (error) {
                console.error("Error generating content:", error);
                displayError("生成內容時發生錯誤。請確認輸入的單字是否正確。");
                imagePlaceholder.classList.remove('hidden');
                wordImage.classList.add('hidden');
                showLoading(false);
            }
        }

        // Exponential backoff for API calls
        async function fetchWithExponentialBackoff(url, options, maxRetries = 5, delay = 1000) {
            for (let i = 0; i < maxRetries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (response.status !== 429) {
                        return response;
                    }
                    console.warn(`Rate limit exceeded, retrying in ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                    delay *= 2; // Exponential backoff
                } catch (error) {
                    console.error("Fetch error, retrying...", error);
                    await new Promise(resolve => setTimeout(resolve, delay));
                    delay *= 2;
                }
            }
            throw new Error(`Failed to fetch after ${maxRetries} retries.`);
        }
        
        generateContentBtn.addEventListener('click', generateLearningContent);
        wordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                generateLearningContent();
            }
        });
        
        playWordBtn.addEventListener('click', () => speakText(wordDisplay.textContent));
        playExampleBtn.addEventListener('click', () => speakText(exampleDisplay.textContent));
        playContextBtn.addEventListener('click', () => speakText(contextDisplay.textContent));
    </script>

</body>
</html>
